{"version":3,"file":"static/js/360.1ab07eb0.chunk.js","mappings":"+NAqDA,UA9CmB,SAAAA,GACjB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAAQP,EAAaQ,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRJ,GAASD,GAAa,GACtBC,IACEK,EAAAA,EAAAA,IAAmBL,GAAOM,MAAK,SAAAC,GACzBA,EAAKC,OAAS,GAChBX,EAAiBU,GACjBR,GAAa,KAEbU,MAAM,2BACNV,GAAa,GAEhB,GACJ,GAAE,CAACC,IAaJ,OACE,4BACE,kBAAMU,SAAU,SAAAC,GAAC,OAbC,SAAAA,GAEpB,GADAA,EAAEC,iBACwB,KAAtBD,EAAEE,OAAO,GAAGC,MAAhB,CAKA,IAAMd,EAAQW,EAAEE,OAAO,GAAGC,MAC1BpB,EAAgB,CAAEM,MAAAA,GAHjB,MAFCS,MAAM,qCAMT,CAIwBM,CAAcJ,EAAlB,EAAjB,WACE,kBAAOK,KAAK,UACZ,mBAAQA,KAAK,SAAb,uBAEDlB,IAAa,SAAC,IAAD,IACbE,GAASJ,EAAcY,OAAS,IAC/B,SAAC,IAAD,CAAYS,WAAYrB,EAAeM,SAAUA,MAIxD,C","sources":["pages/MoviesView/MoviesView.jsx"],"sourcesContent":["import { useLocation, useSearchParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { getSearchingMovies } from 'services/getMoviesAPI';\nimport { useEffect } from 'react';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nconst MoviesView = props => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchResults, setSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    query && setIsLoading(true);\n    query &&\n      getSearchingMovies(query).then(data => {\n        if (data.length > 0) {\n          setSearchResults(data);\n          setIsLoading(false);\n        } else {\n          alert('Sorry, movies not found');\n          setIsLoading(false);\n        }\n      });\n  }, [query]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    if (e.target[0].value === '') {\n      alert('Please write the name of the movie');\n      return;\n    }\n\n    const query = e.target[0].value;\n    setSearchParams({ query });\n  };\n\n  return (\n    <div>\n      <form onSubmit={e => submitHandler(e)}>\n        <input type=\"text\" />\n        <button type=\"submit\">submit</button>\n      </form>\n      {isLoading && <Spinner />}\n      {query && searchResults.length > 0 && (\n        <MoviesList moviesData={searchResults} location={location} />\n      )}\n    </div>\n  );\n};\n\nexport default MoviesView;\n"],"names":["props","useSearchParams","searchParams","setSearchParams","useState","searchResults","setSearchResults","isLoading","setIsLoading","query","get","location","useLocation","useEffect","getSearchingMovies","then","data","length","alert","onSubmit","e","preventDefault","target","value","submitHandler","type","moviesData"],"sourceRoot":""}